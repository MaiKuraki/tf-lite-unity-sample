#pragma kernel TextureToTensor

// Enables mean and stddev offset
#pragma multi_compile_local __ USE_OFFSET
// Enables 4-channel input
#pragma multi_compile_local __ USE_4CH_TENSOR

Texture2D<float4> _InputTex;

#if USE_4CH_TENSOR
RWStructuredBuffer<float4> _OutputTensor;
#else // 3ch by default
RWStructuredBuffer<float3> _OutputTensor;
#endif // USE_4CH_TENSOR

uint2 _OutputSize;
float4x4 _TransformMatrix;

SamplerState linearClampSampler;

#if USE_OFFSET
float3 _Mean = float3(0.485, 0.456, 0.406);
float3 _StdDev = float3(0.229, 0.224, 0.225);
#endif // USE_OFFSET

[numthreads(8,8,1)]
void TextureToTensor (uint2 id : SV_DispatchThreadID)
{
    if(any(id >= _OutputSize))
    {
        return; 
    }

    float2 uv = (float2)id / float2(_OutputSize - 1.0);
    uv = mul(_TransformMatrix, float4(uv, 0, 1)).xy;

    float4 color = any(uv < 0) || any(uv > 1)
        ? float4(0, 0, 0, 1) // Set to black the outside
        : _InputTex.SampleLevel(linearClampSampler, uv, 0);

    #if USE_OFFSET
    color.rgb = (color.rgb - _Mean) / _StdDev;
    #endif // USE_OFFSET
    
    // Flip Y axis
    uint tid = (_OutputSize.y - 1 - id.y) * _OutputSize.x + id.x;

    // Write to output tensor
    #if USE_4CH_TENSOR
    _OutputTensor[tid] = color;
    #else // 3ch by default
    _OutputTensor[tid] = color.rgb;
    #endif // USE_4CH_TENSOR
}
